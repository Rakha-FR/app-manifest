apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
data:
  postgresql.conf: |
    listen_addresses = '*'
    max_connections = 1000
    shared_buffers = 128MB
    effective_cache_size = 47616MB
    maintenance_work_mem = 2GB
    checkpoint_completion_target = 0.7
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    work_mem = 4MB
    min_wal_size = 1GB
    max_wal_size = 4GB
    max_worker_processes = 12
    max_parallel_workers_per_gather = 4
    archive_mode = on
    archive_command = 'cp "%p" "/var/lib/pgsql/archivedir/%f"'
    wal_level = replica
    hot_standby = on
    max_wal_senders = 10
    max_replication_slots = 10
    hot_standby_feedback = on

  pg_hba.conf: |
    local   all             all                                     trust
    host    all             all             127.0.0.1/32            trust
    host    all             all             ::1/128                 trust
    local   replication     all                                     trust
    host    replication     all             127.0.0.1/32            trust
    host    replication     all             ::1/128                 trust
    host    replication     replicator      0.0.0.0/0               trust
    host    all             all             0.0.0.0/0               trust

  postgresql.auto.conf: |
    primary_conninfo = 'host=primary-db-service port=5432 user=replicator password=${POSTGRES_PASSWORD}'
    primary_slot_name = 'replication_slot_slave1'

  init.sh: |
    #!/bin/bash
    set -e


    until pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB"; do
        echo "Waiting for PostgreSQL to be ready..."
        sleep 1
    done

    echo "Create replicator user"
    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
      DO \$\$ 
      BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'replicator') THEN
          CREATE USER replicator WITH REPLICATION;
        END IF;
      END
      \$\$;
      DO \$\$ 
      BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'hcuser') THEN
          CREATE USER hcuser WITH LOGIN;
          GRANT USAGE ON SCHEMA pg_catalog TO hcuser;
          GRANT SELECT ON pg_stat_activity, pg_database TO hcuser;
        END IF;
      END
      \$\$;
      DO \$\$ 
      BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_replication_slots WHERE slot_name = 'replication_slot_slave1') THEN
          PERFORM pg_create_physical_replication_slot('replication_slot_slave1');
        END IF;
      END
      \$\$;
    EOSQL

    REPLICA_PATH="/var/lib/postgresql/data-slave"

    if [ -d "$REPLICA_PATH" ]; then
      echo "Cleaning up REPLICA data: $REPLICA_PATH"
      find $REPLICA_PATH -mindepth 1 -delete
      echo "REPLICA deleted successfully."
    else
      echo "REPLICA $REPLICA_PATH not found."
    fi

    echo "Backup master"
    pg_basebackup -D /var/lib/postgresql/data-slave -S replication_slot_slave1 -X stream -P -U replicator -Fp -R

    echo "Copy slave data"
    cp /etc/postgresql/replication/slave-config/* /var/lib/postgresql/data-slave
    cp /etc/postgresql/replication/config/pg_hba.conf /var/lib/postgresql/data
    cp /etc/postgresql/replication/config/pg_hba.conf /var/lib/postgresql/data-slave
