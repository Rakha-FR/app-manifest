apiVersion: v1
kind: PersistentVolume
metadata:
  name: db-data
  labels:
    db: primary
spec:
  capacity:
    storage: 3Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: /mnt/data/primary
    type: DirectoryOrCreate

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: db-data-slave
  labels:
    db: replica
spec:
  capacity:
    storage: 3Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: /mnt/data/replica
    type: DirectoryOrCreate

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-data-pvc
spec:
  selector:
    matchLabels:
      db: primary
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 3Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-data-slave-pvc
spec:
  selector:
    matchLabels:
      db: replica
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 3Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: deploy-primary-db
  labels:
    services: primary-db
spec:
  serviceName: "deploy-primary-db"
  replicas: 1
  selector:
    matchLabels:
      services: primary-db
  template:
    metadata:
      name: primary-db
      labels:
        services: primary-db
    spec:
      nodeSelector:
        kubernetes.io/hostname: "new-worker2"
      volumes:
        - name: db-data
          persistentVolumeClaim:
            claimName: db-data-pvc
        - name: db-data-slave
          persistentVolumeClaim:
            claimName: db-data-slave-pvc
        - name: postgresql-config
          configMap:
            name: postgresql-config
      containers:
        - name: primary-db
          image: postgres:latest
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: env-db
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: db-data
              mountPath: /var/lib/postgresql/data
            - name: db-data-slave
              mountPath: /var/lib/postgresql/data-slave
            - name: postgresql-config
              mountPath: /etc/postgresql/postgresql.conf
              subPath: postgresql.conf
            - name: postgresql-config
              mountPath: /etc/postgresql/pg_hba.conf
              subPath: pg_hba.conf
            - name: postgresql-config
              mountPath: /etc/postgresql/slave/slave-config/postgresql.auto.conf
              subPath: postgresql.auto.conf
            - name: postgresql-config
              mountPath: /etc/postgresql/slave/init.sh
              subPath: init.sh
          livenessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: deploy-replica-db
  labels:
    services: replica-db
spec:
  serviceName: "deploy-replica-db"
  replicas: 1
  selector:
    matchLabels:
      services: replica-db
  template:
    metadata:
      name: replica-db
      labels:
        services: replica-db
    spec:
      nodeSelector:
        kubernetes.io/hostname: "new-worker2"
      volumes:
        - name: db-data-slave
          persistentVolumeClaim:
            claimName: db-data-slave-pvc
        - name: postgresql-config
          configMap:
            name: postgresql-config
      containers:
        - name: replica-db
          image: postgres:latest
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: env-db
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: db-data-slave
              mountPath: /var/lib/postgresql/data
            - name: postgresql-config
              mountPath: /etc/postgresql/pg_hba.conf
              subPath: pg_hba.conf
          livenessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

---
apiVersion: v1
kind: Service
metadata:
  name: primary-db-service
spec:
  selector:
    services: primary-db
  ports:
    - port: 5432
      targetPort: 5432
  clusterIP: None

---
apiVersion: v1
kind: Service
metadata:
  name: replica-db-service
spec:
  selector:
    services: replica-db
  ports:
    - port: 5432
      targetPort: 5432
  clusterIP: None
