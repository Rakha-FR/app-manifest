apiVersion: batch/v1
kind: Job
metadata:
  name: replication-script-job
  annotations:
    argocd.argoproj.io/hook: PostSync, SyncFail
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      nodeSelector:
        kubernetes.io/hostname: "new-worker2"
      serviceAccountName: kubectl-access
      restartPolicy: Never
      containers:
        - name: replication-script
          image: bitnami/kubectl:latest
          command: ["/bin/sh", "-c"]
          args:
            - |
              PRIMARY_SS=$(kubectl get statefulset -l services=primary-db -o custom-columns=":metadata.name" | tr -d '\n' | head -n 1)
              REPLICA_SS=$(kubectl get statefulset -l services=replica-db -o custom-columns=":metadata.name" | tr -d '\n' | head -n 1)
              PRIMARY_POD=$(kubectl get pod -l services=primary-db -o custom-columns=":metadata.name")
              echo "$PRIMARY_SS"
              echo "$REPLICA_SS"
              kubectl exec ${PRIMARY_POD} -c primary-db -- sh /etc/postgresql/slave/init.sh
              echo "Restart postgres service"
              kubectl rollout restart statefulset ${PRIMARY_SS}

              while true; do
                PRIMARY_POD=$(kubectl get pod -l services=primary-db -o custom-columns=":metadata.name")
                PRIMARY_STATUS=$(kubectl get pod $PRIMARY_POD -o jsonpath="{.status.phase}")
                if [ "$PRIMARY_STATUS" = "Running" ]; then
                  echo "Primary pods are running:"
                  echo "$PRIMARY_POD: $PRIMARY_STATUS"
                  break
                else
                  echo "Waiting for primary pod to be in 'Running' status..."
                  echo "$PRIMARY_POD: $PRIMARY_STATUS"
                  sleep 10
                fi
              done

              echo "Restart postgres service"
              kubectl rollout restart statefulset ${REPLICA_SS}

              while true; do
                REPLICA_POD=$(kubectl get pod -l services=replica-db -o custom-columns=":metadata.name")
                REPLICA_STATUS=$(kubectl get pod $REPLICA_POD -o jsonpath="{.status.phase}")
                if [ "$REPLICA_STATUS" = "Running" ]; then
                  echo "Replica pods are running:"
                  echo "$REPLICA_POD: $REPLICA_STATUS"
                  break
                else
                  echo "Waiting for replica pod to be in 'Running' status..."
                  echo "$REPLICA_POD: $REPLICA_STATUS"
                  sleep 10
                fi
              done
          securityContext:
            runAsUser: 0
